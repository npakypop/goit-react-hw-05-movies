{"version":3,"file":"static/js/593.55d0f2b9.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0 auto;\n  margin-top: 40px;\n  list-style: none;\n  padding-left: 0;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 40px;\n`;\nexport const WrapInfo = styled.div`\n  border-top: solid 1px #808080;\n  text-align: center;\n  padding: 20px 10px;\n`;\nexport const MovieItem = styled.li`\n  box-shadow: 0px 0px 5px 2px rgba(0, 0, 0, 0.3);\n  max-width: 300px;\n`;\nexport const Date = styled.p`\n  margin-top: 20px;\n`;\nexport const Button = styled.button`\n  margin-top: 20px;\n  padding: 10px 30px;\n  cursor: pointer;\n  text-align: center;\n  background-color: orange;\n  border-radius: 10px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { List, MovieItem, WrapInfo, Button } from './MovieList.styled';\n\nexport const MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(\n        ({ title, id, release_date, name, first_air_date, poster_path }) => (\n          <MovieItem key={id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt={title}\n              width={300}\n            />\n            <WrapInfo>\n              <h4>{title ? title : name}</h4>\n\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                <Button>More Info</Button>\n              </Link>\n            </WrapInfo>\n          </MovieItem>\n        )\n      )}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: start;\n  align-items: baseline;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const Input = styled.input`\n  padding: 5px 10px;\n  font-size: 18px;\n  border: none;\n  outline: none;\n  border-bottom: solid 2px #808080;\n\n  &:focus-visible {\n    border: none;\n    border-bottom: solid 2px orange;\n  }\n`;\nexport const Button = styled.button`\n  text-transform: uppercase;\n  margin-top: 20px;\n  margin-left: 20px;\n  padding: 10px 30px;\n  cursor: pointer;\n  text-align: center;\n  background-color: orange;\n  border-radius: 10px;\n\n  &:hover {\n    background-color: black;\n    color: orange;\n  }\n`;\n","import { useState } from 'react';\nimport { Form, Button, Input } from './SearchForm.styled';\nexport const SearchForm = ({ value, onSearchSubmit }) => {\n  const [searchValue, setSearchValue] = useState(value ?? '');\n\n  const inputChange = event => {\n    setSearchValue(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSearchSubmit(searchValue);\n    if (searchValue === '') {\n      alert('Please type your request');\n    }\n    event.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        <Input type=\"text\" onChange={inputChange} value={searchValue} />\n      </label>\n      <Button type=\"submit\">search</Button>\n    </Form>\n  );\n};\n","import { SearchForm } from '../components/SearchForm/SearchForm';\nimport { MovieList } from '../components/MovieList/MovieList';\nimport { getMovieByQuery } from 'services/Api';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!movieName) return;\n\n    getMovieByQuery(movieName)\n      .then(({ results }) => {\n        setMovies(results);\n      })\n      .catch(error => console.log(error));\n  }, [movieName]);\n\n  const onSearchSubmit = resp => {\n    setSearchParams(resp !== '' ? { query: resp } : {});\n  };\n\n  return (\n    <>\n      <SearchForm onSearchSubmit={onSearchSubmit} value={movieName} />\n      <MovieList movies={movies} />\n    </>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: \"a86899d726d6982dbed218ba90f0207b\",\n}\n\nexport const getTrendingMovies = async() => {\n    const { data } = await axios.get('/trending/movie/day', {\n        params: { page: 1, },\n    });\n    console.log(data);\n    return data;\n}\n\nexport const getMovieByQuery = async (query) => {\n    const { data } = await axios.get('/search/movie', {\n        params: {  query },\n    })\n    return data;\n}\n\nexport const getMovieById = async (id) => {\n    const { data } = await axios.get(`/movie/${id}`, {\n        params: { id },\n    })\n    return data;\n}\nexport const getMovieCast = async (id) => {\n    const { data } = await axios.get(`/movie/${id}/credits`, {\n        params: { id },\n    })\n    console.log(data);\n    return data.cast;\n\n}\nexport const getMovieReview= async (id) => {\n    const { data } = await axios.get(`/movie/${id}/reviews`, {\n        params: { id },\n    })\n    return data.results;\n}"],"names":["List","styled","WrapInfo","MovieItem","Button","MovieList","movies","location","useLocation","map","title","id","name","release_date","poster_path","first_air_date","src","alt","width","to","state","from","Form","Input","SearchForm","value","onSearchSubmit","useState","searchValue","setSearchValue","onSubmit","event","preventDefault","alert","target","reset","type","onChange","setMovies","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","getMovieByQuery","then","results","catch","error","console","log","resp","query","axios","api_key","getTrendingMovies","params","page","data","getMovieById","getMovieCast","cast","getMovieReview"],"sourceRoot":""}