{"version":3,"file":"static/js/688.20a3661f.chunk.js","mappings":"mQAGaA,GAASC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iWAiBNE,EAAcF,EAAAA,GAAAA,IAAH,iEAIXG,EAAOH,EAAAA,GAAAA,IAAH,iIAQJI,EAAQJ,EAAAA,GAAAA,GAAH,4CAILK,EAASL,EAAAA,GAAAA,IAAH,2DAKNM,EAAUN,EAAAA,GAAAA,GAAH,uGAMPO,GAAWP,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,4R,SCYrB,EA7CkB,WAAO,IAAD,IACdQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAO7C,GANAC,QAAQC,IAAI,WAAYN,IAExBO,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAab,GAASc,KAAKV,EAC5B,GAAE,CAACJ,KAECG,EACH,OAAO,KAGT,IAAQY,EACNZ,EADMY,YAAaC,EACnBb,EADmBa,MAAOC,EAC1Bd,EAD0Bc,KAAMC,EAChCf,EADgCe,aAAcC,EAC9ChB,EAD8CgB,eAAgBC,EAC9DjB,EAD8DiB,SAGhE,OACE,iCACE,SAAC7B,EAAD,CAAQ8B,GAAId,EAAZ,6BACA,UAACb,EAAD,YACE,SAACG,EAAD,CACEyB,IAAG,yCAAoCP,GACvCQ,IAAKP,EACLQ,MAAO,OAET,UAAC7B,EAAD,YACE,SAACC,EAAD,UAAQoB,GAAgBC,KACxB,0CAAkBC,GAA8BC,MAChD,uBAAIC,KACJ,UAACtB,EAAD,YACE,yBACE,SAACC,EAAD,CAAUsB,GAAG,OAAb,qBAEF,yBACE,SAACtB,EAAD,CAAUsB,GAAG,UAAb,2BAGJ,SAAC,KAAD,YAKT,C,+LCxDDI,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACpBC,QAAS,oCAGN,IAAMC,EAAiB,mCAAG,sGACNF,EAAAA,EAAAA,IAAU,sBAAuB,CACpDG,OAAQ,CAAEC,KAAM,KAFS,uBACrBC,EADqB,EACrBA,KAGRpB,QAAQC,IAAImB,GAJiB,kBAKtBA,GALsB,2CAAH,qDAQjBC,EAAe,mCAAG,WAAOC,GAAP,yFACJP,EAAAA,EAAAA,IAAU,gBAAiB,CAC9CG,OAAQ,CAAGI,MAAAA,KAFY,uBACnBF,EADmB,EACnBA,KADmB,kBAIpBA,GAJoB,2CAAH,sDAOfjB,EAAY,mCAAG,WAAOoB,GAAP,yFACDR,EAAAA,EAAAA,IAAA,iBAAoBQ,GAAM,CAC7CL,OAAQ,CAAEK,GAAAA,KAFU,uBAChBH,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAMZI,EAAY,mCAAG,WAAOD,GAAP,yFACDR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,YAAkC,CACrDL,OAAQ,CAAEK,GAAAA,KAFU,uBAChBH,EADgB,EAChBA,KAGRpB,QAAQC,IAAImB,GAJY,kBAKjBA,EAAKK,MALY,2CAAH,sDAQZC,EAAc,mCAAE,WAAOH,GAAP,yFACFR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,YAAkC,CACrDL,OAAQ,CAAEK,GAAAA,KAFW,uBACjBH,EADiB,EACjBA,KADiB,kBAIlBA,EAAKO,SAJa,2CAAF,qD","sources":["pages/MovieCard.styled.js","pages/MovieCard.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const GoBack = styled(Link)`\n  margin-top: 20px;\n  margin-left: 40px;\n  display: inline-block;\n  text-decoration: none;\n  text-transform: uppercase;\n  padding: 10px 30px;\n  cursor: pointer;\n  text-align: center;\n  background-color: orange;\n  border-radius: 10px;\n  color: black;\n  &:hover {\n    background-color: black;\n    color: orange;\n  }\n`;\nexport const CardWrapper = styled.div`\n  display: flex;\n  padding: 20px 40px;\n`;\nexport const Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  align-items: start;\n  padding: 20px 40px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 30px;\n`;\n\nexport const Poster = styled.img`\n  width: 400px;\n  height: 600px;\n`;\n\nexport const Buttons = styled.ul`\n  padding-top: 10px;\n  padding-bottom: 10px;\n  display: flex;\n  gap: 40px;\n`;\nexport const InfoLink = styled(Link)`\n  text-decoration: none;\n  text-transform: uppercase;\n  padding: 10px 30px;\n  cursor: pointer;\n  text-align: center;\n  background-color: orange;\n  border-radius: 10px;\n  color: black;\n  &:hover {\n    background-color: black;\n    color: orange;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { getMovieById } from 'services/Api';\nimport { Outlet } from 'react-router-dom';\nimport {\n  Title,\n  Poster,\n  InfoLink,\n  CardWrapper,\n  Info,\n  Buttons,\n  GoBack,\n} from './MovieCard.styled';\n\nconst MovieCard = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  console.log('location', location);\n\n  useEffect(() => {\n    getMovieById(movieId).then(setMovie);\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n\n  const { poster_path, title, name, release_date, first_air_date, overview } =\n    movie;\n\n  return (\n    <>\n      <GoBack to={backLinkHref}>Back to movies</GoBack>\n      <CardWrapper>\n        <Poster\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt={title}\n          width={200}\n        />\n        <Info>\n          <Title>{title ? title : name}</Title>\n          <p>Release date: {release_date ? release_date : first_air_date}</p>\n          <p>{overview}</p>\n          <Buttons>\n            <li>\n              <InfoLink to=\"cast\">Cast</InfoLink>\n            </li>\n            <li>\n              <InfoLink to=\"reviews\">Reviews</InfoLink>\n            </li>\n          </Buttons>\n          <Outlet />\n        </Info>\n      </CardWrapper>\n    </>\n  );\n};\nexport default MovieCard;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key: \"a86899d726d6982dbed218ba90f0207b\",\n}\n\nexport const getTrendingMovies = async() => {\n    const { data } = await axios.get('/trending/movie/day', {\n        params: { page: 1, },\n    });\n    console.log(data);\n    return data;\n}\n\nexport const getMovieByQuery = async (query) => {\n    const { data } = await axios.get('/search/movie', {\n        params: {  query },\n    })\n    return data;\n}\n\nexport const getMovieById = async (id) => {\n    const { data } = await axios.get(`/movie/${id}`, {\n        params: { id },\n    })\n    return data;\n}\nexport const getMovieCast = async (id) => {\n    const { data } = await axios.get(`/movie/${id}/credits`, {\n        params: { id },\n    })\n    console.log(data);\n    return data.cast;\n\n}\nexport const getMovieReview= async (id) => {\n    const { data } = await axios.get(`/movie/${id}/reviews`, {\n        params: { id },\n    })\n    return data.results;\n}"],"names":["GoBack","styled","Link","CardWrapper","Info","Title","Poster","Buttons","InfoLink","movieId","useParams","useState","movie","setMovie","location","useLocation","backLinkHref","state","from","console","log","useEffect","getMovieById","then","poster_path","title","name","release_date","first_air_date","overview","to","src","alt","width","axios","api_key","getTrendingMovies","params","page","data","getMovieByQuery","query","id","getMovieCast","cast","getMovieReview","results"],"sourceRoot":""}